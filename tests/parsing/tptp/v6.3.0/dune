; File auto-generated by gentests.ml
; Auto-generated part begin

; Test for SYN000+1.p
(rule
  (target  SYN000+1.output)
  (deps    SYN000+1.p)
  (package dolmen_bin)
  (action (chdir %{workspace_root}
           (with-outputs-to %{target}
            (with-accepted-exit-codes 0
             (run dolmen --color=false %{deps} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (action (diff SYN000+1.expected SYN000+1.output)))

; Test for SYN000+2.p
(rule
  (target  SYN000+2.output)
  (deps    SYN000+2.p)
  (package dolmen_bin)
  (action (chdir %{workspace_root}
           (with-outputs-to %{target}
            (with-accepted-exit-codes 0
             (run dolmen --color=false %{deps} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (action (diff SYN000+2.expected SYN000+2.output)))

; Test for SYN000-1.p
(rule
  (target  SYN000-1.output)
  (deps    SYN000-1.p)
  (package dolmen_bin)
  (action (chdir %{workspace_root}
           (with-outputs-to %{target}
            (with-accepted-exit-codes 0
             (run dolmen --color=false %{deps} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (action (diff SYN000-1.expected SYN000-1.output)))

; Test for SYN000-2.p
(rule
  (target  SYN000-2.output)
  (deps    SYN000-2.p)
  (package dolmen_bin)
  (action (chdir %{workspace_root}
           (with-outputs-to %{target}
            (with-accepted-exit-codes 0
             (run dolmen --color=false %{deps} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (action (diff SYN000-2.expected SYN000-2.output)))

; Test for SYN000=2.p
(rule
  (target  SYN000=2.output)
  (deps    SYN000=2.p)
  (package dolmen_bin)
  (action (chdir %{workspace_root}
           (with-outputs-to %{target}
            (with-accepted-exit-codes 0
             (run dolmen --color=false %{deps} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (action (diff SYN000=2.expected SYN000=2.output)))

; Test for SYN000^1.p
(rule
  (target  SYN000^1.output)
  (deps    SYN000^1.p)
  (package dolmen_bin)
  (action (chdir %{workspace_root}
           (with-outputs-to %{target}
            (with-accepted-exit-codes 0
             (run dolmen --color=false %{deps} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (action (diff SYN000^1.expected SYN000^1.output)))

; Test for SYN000^2.p
(rule
  (target  SYN000^2.output)
  (deps    SYN000^2.p)
  (package dolmen_bin)
  (action (chdir %{workspace_root}
           (with-outputs-to %{target}
            (with-accepted-exit-codes 0
             (run dolmen --color=false %{deps} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (action (diff SYN000^2.expected SYN000^2.output)))

; Test for SYN000_1.p
(rule
  (target  SYN000_1.output)
  (deps    SYN000_1.p)
  (package dolmen_bin)
  (action (chdir %{workspace_root}
           (with-outputs-to %{target}
            (with-accepted-exit-codes 0
             (run dolmen --color=false %{deps} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (action (diff SYN000_1.expected SYN000_1.output)))

; Test for SYN000_2.p
(rule
  (target  SYN000_2.output)
  (deps    SYN000_2.p)
  (package dolmen_bin)
  (action (chdir %{workspace_root}
           (with-outputs-to %{target}
            (with-accepted-exit-codes 0
             (run dolmen --color=false %{deps} %{read-lines:flags.dune}))))))
(rule
  (alias runtest)
  (action (diff SYN000_2.expected SYN000_2.output)))
; Auto-generated part end
